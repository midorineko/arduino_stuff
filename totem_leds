#define FASTLED_ESP8266_RAW_PIN_ORDER
#define FASTLED_INTERNAL
#define FASTLED_INTERRUPT_RETRY_COUNT 0
#define FASTLED_ALLOW_INTERRUPTS 0

#include "FastLED.h"
#include <ESP8266WiFi.h>
#include <WiFiClient.h> 
#include <ESP8266WebServer.h>
#include <DNSServer.h>
#include <ESP8266mDNS.h>

const char *softAP_ssid = "Totem LEDs";
const char *softAP_password = "12345678";
const char *myHostname = "Totem LEDs";

const byte DNS_PORT = 53;
DNSServer dnsServer;

// Web server
ESP8266WebServer server(80);

/* Soft AP network parameters */
IPAddress apIP(192, 168, 4, 1);
IPAddress netMsk(255, 255, 255, 0);
/** Last time I tried to connect to WLAN */
long lastConnectTry = 0;

/** Current WLAN status */
int status = WL_IDLE_STATUS;

#define FASTLED_ESP8266_RAW_PIN_ORDER

#if defined(FASTLED_VERSION) && (FASTLED_VERSION < 3001000)
#warning "Requires FastLED 3.1 or later; check github for latest code."
#endif

#define DATA_PIN    15
//#define CLK_PIN   4
#define LED_TYPE    WS2812B
#define COLOR_ORDER GRB
#define NUM_LEDS    50
CRGB leds[NUM_LEDS];
#define BRIGHTNESS          130
int FRAMES_PER_SECOND = 60;
uint8_t BeatsPerMinute = 62;
int r = 0;
int g = 155;
int b = 155;
String homemade_method = "else";
bool wifi_on = true;


bool rainbowOn = false;
bool rainbowWithGlitterOn = false;
bool confettiOn = false;
bool sinelonOn = false;
bool juggleOn = false;
bool bpmOn = false;
bool concentricRingsOn = false;
bool unsunkRingsOn = false;
bool sunkRingsOn = false;
bool poolingRingsOn = false;
int delayTime = 15;

unsigned long StartTime = millis();

void setup() {
  FastLED.addLeds<LED_TYPE,DATA_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);
  Serial.begin(115200);
  Serial.println();
  Serial.print("Configuring access point...");
  delay(1000);
  WiFi.softAPConfig(apIP, apIP, netMsk);
  WiFi.softAP(softAP_ssid, softAP_password);
  delay(500); // Without delay I've seen the IP address blank
  Serial.print("AP IP address: ");
  Serial.println(WiFi.softAPIP());
  dnsServer.setErrorReplyCode(DNSReplyCode::NoError);
  dnsServer.start(DNS_PORT, "www.example.com", apIP);

  server.on("/", handleRoot);
  server.on("/concentricRings", concentricRings_call);
  server.on("/unsunkRings", unsunkRings_call);
  server.on("/sunkRings", sunkRings_call);
  server.on("/poolingRings", poolingRings_call);
  server.on("/rainbow", rainbow_call);
  server.on("/rainbowWithGlitter", rainbowWithGlitter_call);
  server.on("/confetti", confetti_call);
  server.on("/sinelon", sinelon_call);
  server.on("/juggle", juggle_call);
  server.on("/next", next_call);
  server.on("/bpm", [](){
    int beats = server.arg("beats").toInt();
    if (beats){
        uint8_t BeatsPerMinute = beats;
    }
    bpm_call();
  });
  server.on("/slowDown", [](){
    FRAMES_PER_SECOND += 20;
    if(FRAMES_PER_SECOND >= 100){
      FRAMES_PER_SECOND = 100;
    }
    handleRoot();
  });
  server.on("/speedUp", [](){
    FRAMES_PER_SECOND -= 20;
    if(FRAMES_PER_SECOND <= 15){
      FRAMES_PER_SECOND = 15;
    }
    handleRoot();
  });
  server.on("/brightUp", [](){
    BRIGHTNESS += 20;
    if(BRIGHTNESS >= 220){
      BRIGHTNESS = 220;
    }
    FastLED.show();
    handleRoot();
  });
  server.on("/brightDown", [](){
    BRIGHTNESS -= 20;
    if(BRIGHTNESS <= 15){
      BRIGHTNESS = 0;
    }
    FastLED.show();
    handleRoot();
  });
  server.on("/solid", [](){
    r = server.arg("r").toInt();
    g = server.arg("g").toInt();
    b = server.arg("b").toInt();
    homemade_method = "home";
    solid_loop();
    handleRoot();
  });
  server.on("/increase", [](){
    int color = server.arg("c").toInt();
    int ammount = server.arg("a").toInt();
    if(color == 1){
      r += ammount;
    }
    if(color == 2){
      g+=ammount;
    }
    if(color == 3){
      b+=ammount;
    }
    if(r > 250){
      r =250;
    }
    if(g > 250){
      g=250;
    }
    if(b>250){
      b=250;
    }
    homemade_method = "home";
    solid_loop();
    handleRoot();
  });
  server.on("/decrease", [](){
    int color = server.arg("c").toInt();
    int ammount = server.arg("a").toInt();
    if(color == 1){
      r -= ammount;
    }
    if(color == 2){
      g -= ammount;
    }
    if(color == 3){
      b -= ammount;
    }
    if(r < 10){
      r = 0;
    }
    if(g < 10){
      g=0;
    }
    if(b < 10){
      b=0;
    }
    homemade_method = "home";
    solid_loop();
    handleRoot();
  });

  server.onNotFound ( handleNotFound );
  server.begin(); // Web server start
  Serial.println("HTTP server started");
  solid_loop();
}

String htmlTemplateTop = "<html><head><style>"
  "</style></head><body><div id='page'><div id='title' style='text-align: center;'>Totem LEDs</div>";
String buttonsOne = "</br></br><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/rainbow'>Rainbow</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/rainbowWithGlitter'>Glitter</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/confetti'>Confetti</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/sinelon'>Sinelon</a> </br>";
String buttonsFive = "</br></br><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/speedUp'>Speed Up</a> <a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/slowDown'>Slow Down</a></br><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/brightUp'>Brighten</a> <a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/brightDown'>Dim</a></br>";
String buttonsTwo = "</br></br><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/juggle'>Juggle</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/bpm?beats=116'>BPM</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/solid?r=0&b=255=&g=100'>Solid</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/next'>Next</a>";
String buttonsThree = "</br><br></br><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/increase?c=1&a=50'>Up Red</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/decrease?c=1&a=50'>Down Red</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/increase?c=2&a=50'>Up Blue</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/decrease?c=2&a=50'>Down Blue</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/increase?c=3&a=50'>Up Green</a><a style='width: 39%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/decrease?c=3&a=50'>Down Green</a>";
String buttonsFour = "</br></br><br><a style='width: 88%; height 30px; border: 1px solid orange; padding: 2% 2%; margin: 3% 3%; text-align: center; float: left; display: block;' href='/solid?r=0&g=0=&b=0'>Off</a>";
String htmlTemplateBottom = "</div></body></html>";

void handleRoot() {
  //Start page content
  server.sendHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  server.sendHeader("Pragma", "no-cache");
  server.sendHeader("Expires", "-1");
  server.setContentLength(CONTENT_LENGTH_UNKNOWN);
  server.send(200, "text/html", ""); // Empty content inhibits Content-length header so we have to close the socket ourselves.

  //Put together HTML Template & Light Color
  server.sendContent(htmlTemplateTop);
  server.sendContent(buttonsOne);
  server.sendContent(buttonsTwo);
  server.sendContent(buttonsThree);
  server.sendContent(buttonsFive);
  server.sendContent(buttonsFour);
  server.sendContent(htmlTemplateBottom);
  
  server.client().stop(); // Stop is needed because we sent no content length
}
void handleNotFound() {
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += ( server.method() == HTTP_GET ) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for ( uint8_t i = 0; i < server.args(); i++ ) {
    message += " " + server.argName ( i ) + ": " + server.arg ( i ) + "\n";
  }
  server.sendHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  server.sendHeader("Pragma", "no-cache");
  server.sendHeader("Expires", "-1");
  server.send ( 404, "text/plain", message );
}

// List of patterns to cycle through.  Each is defined as a separate function below.
typedef void (*SimplePatternList[])();
SimplePatternList gPatterns = { rainbow, rainbowWithGlitter, confetti, sinelon, bpm, juggle };

uint8_t gCurrentPatternNumber = 0; // Index number of which pattern is current
uint8_t gHue = 0; // rotating "base color" used by many of the patterns

void loop()
{
  dnsServer.processNextRequest();
  server.handleClient();
  int setDelay;
  if (homemade_method == "else"){
      if(rainbowOn){
        rainbow();
      }
      if(rainbowWithGlitterOn){
        rainbowWithGlitter();
      }
      if(confettiOn){
        confetti();
      }
      if(sinelonOn){
        sinelon();
      }
      if(juggleOn){
        juggle();
      }
      if(bpmOn){
        bpm();
      }
      FastLED.show(); 
      setDelay =  FRAMES_PER_SECOND;
      EVERY_N_MILLISECONDS( 20 ) { gHue++; } // slowly cycle the "base color" through the rainbow
  }
  if (homemade_method == "rings"){
    if(concentricRingsOn){
    }
    if(unsunkRingsOn){
    }
    if(sunkRingsOn){
    }
    if(poolingRingsOn){
    }
    setDelay = FRAMES_PER_SECOND;
  }
  unsigned long CurrentTime = millis();
  unsigned long ElapsedTime = CurrentTime - StartTime;
  if(ElapsedTime > 300000){
    if(wifi_on){
      WiFi.mode( WIFI_OFF );
      WiFi.forceSleepBegin();
      wifi_on = false;
    }
    StartTime = millis();
  }
  delay(FRAMES_PER_SECOND);
}

#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))
void nextPattern()
{
  gCurrentPatternNumber = (gCurrentPatternNumber + 1) % ARRAY_SIZE( gPatterns);
}

void solid_loop(){
    homemade_method = "home";
    for(int k = 0; k < NUM_LEDS; k++) {
      leds[k].setRGB(r, b, g);;
    }
     FastLED.show();
}

void setAllFalse(){
  rainbowOn = false;
  rainbowWithGlitterOn = false;
  confettiOn = false;
  sinelonOn = false;
  juggleOn = false;
  bpmOn = false;
  homemade_method = "else";
  concentricRingsOn = false;
  unsunkRingsOn = false;
  sunkRingsOn = false;
  poolingRingsOn = false;
}

void concentricRings_call()   // FastLED's built-in rainbow generator
{
  setAllFalse();
  concentricRingsOn = true;
  homemade_method = "rings";
  handleRoot();
}

void unsunkRings_call() // built-in FastLED rainbow, plus some random sparkly glitter
{
  setAllFalse();
  unsunkRingsOn = true;
  homemade_method = "rings";
  handleRoot();
}

void sunkRings_call() 
{
  setAllFalse();
  sunkRingsOn = true;
  homemade_method = "rings";
  handleRoot();
}

void poolingRings_call()  // a colored dot sweeping back and forth, with fading trails

{
  setAllFalse();
  poolingRingsOn = true;
  homemade_method = "rings";
  FRAMES_PER_SECOND = 70;
  handleRoot();
}

void rainbow_call()   // FastLED's built-in rainbow generator
{
  setAllFalse();
  rainbowOn = true;
  handleRoot();
}

void rainbowWithGlitter_call() // built-in FastLED rainbow, plus some random sparkly glitter
{
  setAllFalse();
  rainbowWithGlitterOn = true;
  handleRoot();
}

void confetti_call() 
{
  setAllFalse();
  confettiOn = true;
  handleRoot();
}

void sinelon_call()  // a colored dot sweeping back and forth, with fading trails

{
  setAllFalse();
  sinelonOn = true;
  handleRoot();
}

void bpm_call()   // built-in FastLED rainbow, plus some random sparkly glitter
{
  setAllFalse();
  bpmOn = true;
  handleRoot();
}

void juggle_call()  // a colored dot sweeping back and forth, with fading trails
{
  setAllFalse();
  juggleOn = true;
  handleRoot();
}


void next_call() 
{
  setAllFalse();
  nextPattern();
  handleRoot();
}



void rainbow() 
{
  // FastLED's built-in rainbow generator
  fill_rainbow( leds, NUM_LEDS, gHue, 7);
}

void rainbowWithGlitter() 
{
  rainbow();
  addGlitter(80);
}

void addGlitter( fract8 chanceOfGlitter) 
{
  if( random8() < chanceOfGlitter) {
    leds[ random16(NUM_LEDS) ] += CRGB::White;
  }
}

void confetti() 
{
  fadeToBlackBy( leds, NUM_LEDS, 10);
  int pos = random16(NUM_LEDS);
  leds[pos] += CHSV( gHue + random8(64), 200, 255);
  int pos2 = random16(NUM_LEDS);
  leds[pos2] += CHSV( gHue + random8(64), 200, 255);
}

void sinelon()
{
  fadeToBlackBy( leds, NUM_LEDS, 20);
  int pos = beatsin16( 13, 0, NUM_LEDS-1 );
  leds[pos] += CHSV( gHue, 255, 192);
}

void bpm()
{
  CRGBPalette16 palette = PartyColors_p;
  uint8_t beat = beatsin8( BeatsPerMinute, 64, 255);
  for( int i = 0; i < NUM_LEDS; i++) { //9948
    leds[i] = ColorFromPalette(palette, gHue+(i*2), beat-gHue+(i*10));
  }
}

void juggle() {
  fadeToBlackBy( leds, NUM_LEDS, 20);
  byte dothue = 0;
  for( int i = 0; i < 8; i++) {
    leds[beatsin16( i+7, 0, NUM_LEDS-1 )] |= CHSV(dothue, 200, 255);
    dothue += 32;
  }
}
